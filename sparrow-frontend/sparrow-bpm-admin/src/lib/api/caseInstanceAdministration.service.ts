/**
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable } from 'rxjs';

import { CaseInstanceList } from '../model/caseInstanceList';
import { CaseMigrationReportInstance } from '../model/caseMigrationReportInstance';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class CaseInstanceAdministrationService {

    protected basePath = 'https://localhost/bpm/rest';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Returns case instances without authentication checks.
     *
     * @param status optional case instance status (open, closed, canceled) - defaults ot open (1) only
     * @param page optional pagination - at which page to start, defaults to 0 (meaning first)
     * @param pageSize optional pagination - size of the result, defaults to 10
     * @param sort optional sort column, no default
     * @param sortOrder optional sort direction (asc, desc) - defaults to asc
     * @param withData optional flag to load data when loading case instance
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCaseInstances(status?: Array<'open' | 'closed' | 'cancelled'>, page?: number, pageSize?: number, sort?: string, sortOrder?: boolean, withData?: boolean, observe?: 'body', reportProgress?: boolean): Observable<CaseInstanceList>;
    public getCaseInstances(status?: Array<'open' | 'closed' | 'cancelled'>, page?: number, pageSize?: number, sort?: string, sortOrder?: boolean, withData?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CaseInstanceList>>;
    public getCaseInstances(status?: Array<'open' | 'closed' | 'cancelled'>, page?: number, pageSize?: number, sort?: string, sortOrder?: boolean, withData?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CaseInstanceList>>;
    public getCaseInstances(status?: Array<'open' | 'closed' | 'cancelled'>, page?: number, pageSize?: number, sort?: string, sortOrder?: boolean, withData?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {







        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (status) {
            status.forEach((element) => {
                queryParameters = queryParameters.append('status', <any>element);
            })
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (sortOrder !== undefined && sortOrder !== null) {
            queryParameters = queryParameters.set('sortOrder', <any>sortOrder);
        }
        if (withData !== undefined && withData !== null) {
            queryParameters = queryParameters.set('withData', <any>withData);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<CaseInstanceList>(`${this.basePath}/server/admin/cases/instances`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Migrates a specified case instance to another KIE container and case definition.
     *
     * @param containerId container id that case instance belongs to
     * @param caseId identifier of case instance to be migrated
     * @param targetContainerId container id that new case definition should be migrated to to
     * @param body process and node mapping - unique ids of old definition to new definition given as Map of Maps - ProcessMapping should provide map of process definitions (mandatory), NodeMapping should provide map of node mappings (optional)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public migrateCaseInstance(containerId: string, caseId: string, targetContainerId: string, body?: string, observe?: 'body', reportProgress?: boolean): Observable<CaseMigrationReportInstance>;
    public migrateCaseInstance(containerId: string, caseId: string, targetContainerId: string, body?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CaseMigrationReportInstance>>;
    public migrateCaseInstance(containerId: string, caseId: string, targetContainerId: string, body?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CaseMigrationReportInstance>>;
    public migrateCaseInstance(containerId: string, caseId: string, targetContainerId: string, body?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling migrateCaseInstance.');
        }

        if (caseId === null || caseId === undefined) {
            throw new Error('Required parameter caseId was null or undefined when calling migrateCaseInstance.');
        }

        if (targetContainerId === null || targetContainerId === undefined) {
            throw new Error('Required parameter targetContainerId was null or undefined when calling migrateCaseInstance.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (targetContainerId !== undefined && targetContainerId !== null) {
            queryParameters = queryParameters.set('targetContainerId', <any>targetContainerId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<CaseMigrationReportInstance>(`${this.basePath}/server/admin/containers/${encodeURIComponent(String(containerId))}/cases/instances/${encodeURIComponent(String(caseId))}`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
