/**
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Message } from '../model/message';
import { ServiceResponse } from '../model/serviceResponse';
import { ServiceResponsesList } from '../model/serviceResponsesList';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class KIEServerAndKIEContainersService {

    protected basePath = 'https://localhost/bpm/rest';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Activates (previously deactivated) KIE container on this server
     *
     * @param containerId Container id of deployed KIE Container
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public activateContainer(containerId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public activateContainer(containerId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public activateContainer(containerId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public activateContainer(containerId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling activateContainer.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/xml'
        ];

        return this.httpClient.put<any>(`${this.basePath}/server/containers/${encodeURIComponent(String(containerId))}/status/activated`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates a new KIE container in the KIE Server with a specified KIE container ID
     *
     * @param containerId Container id to be assigned to deployed KIE Container
     * @param body KIE Container resource to be deployed as KieContainerResource
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createContainer(containerId: string, body: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public createContainer(containerId: string, body: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public createContainer(containerId: string, body: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public createContainer(containerId: string, body: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling createContainer.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createContainer.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/server/containers/${encodeURIComponent(String(containerId))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deactivates (previously started) KIE container on this server
     *
     * @param containerId Container id of deployed KIE Container
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deactivateContainer(containerId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deactivateContainer(containerId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deactivateContainer(containerId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deactivateContainer(containerId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling deactivateContainer.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/xml'
        ];

        return this.httpClient.put<any>(`${this.basePath}/server/containers/${encodeURIComponent(String(containerId))}/status/deactivated`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Disposes a specified KIE container.
     *
     * @param containerId Container id to be disposed (undeployed)
     * @param abortProcessInstances optional abortProcessInstances flag to abort process instances when container is disposed
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public disposeContainer(containerId: string, abortProcessInstances?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public disposeContainer(containerId: string, abortProcessInstances?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public disposeContainer(containerId: string, abortProcessInstances?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public disposeContainer(containerId: string, abortProcessInstances?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling disposeContainer.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (abortProcessInstances !== undefined && abortProcessInstances !== null) {
            queryParameters = queryParameters.set('abortProcessInstances', <any>abortProcessInstances);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/server/containers/${encodeURIComponent(String(containerId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Executes one or more KIE Server commands for server-related or container-related operations
     *
     * @param body command script payload
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public executeCommands(body: string, observe?: 'body', reportProgress?: boolean): Observable<ServiceResponsesList>;
    public executeCommands(body: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ServiceResponsesList>>;
    public executeCommands(body: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ServiceResponsesList>>;
    public executeCommands(body: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling executeCommands.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ServiceResponsesList>(`${this.basePath}/server/config`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns information about a specified KIE container.
     *
     * @param containerId Container id to be retrieved
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getContainerInfo(containerId: string, observe?: 'body', reportProgress?: boolean): Observable<ServiceResponse>;
    public getContainerInfo(containerId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ServiceResponse>>;
    public getContainerInfo(containerId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ServiceResponse>>;
    public getContainerInfo(containerId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling getContainerInfo.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ServiceResponse>(`${this.basePath}/server/containers/${encodeURIComponent(String(containerId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns information about the KIE Server. The endpoint for this request is the base URL for the REST API.
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getInfo(observe?: 'body', reportProgress?: boolean): Observable<ServiceResponse>;
    public getInfo(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ServiceResponse>>;
    public getInfo(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ServiceResponse>>;
    public getInfo(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ServiceResponse>(`${this.basePath}/server`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns release ID information (group ID, artifact ID, version) for a specified KIE container.
     *
     * @param containerId Container id that release id should be loaded from
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getReleaseId(containerId: string, observe?: 'body', reportProgress?: boolean): Observable<ServiceResponse>;
    public getReleaseId(containerId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ServiceResponse>>;
    public getReleaseId(containerId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ServiceResponse>>;
    public getReleaseId(containerId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling getReleaseId.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ServiceResponse>(`${this.basePath}/server/containers/${encodeURIComponent(String(containerId))}/release-id`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns information about the KIE scanner used for automatic updates in a specified KIE container, if applicable.
     *
     * @param containerId Container id for scanner to be loaded
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getScannerInfo(containerId: string, observe?: 'body', reportProgress?: boolean): Observable<ServiceResponse>;
    public getScannerInfo(containerId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ServiceResponse>>;
    public getScannerInfo(containerId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ServiceResponse>>;
    public getScannerInfo(containerId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling getScannerInfo.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ServiceResponse>(`${this.basePath}/server/containers/${encodeURIComponent(String(containerId))}/scanner`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns information about the current state and configurations of the KIE Server.
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getServerState(observe?: 'body', reportProgress?: boolean): Observable<ServiceResponse>;
    public getServerState(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ServiceResponse>>;
    public getServerState(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ServiceResponse>>;
    public getServerState(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ServiceResponse>(`${this.basePath}/server/state`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Liveness check for KIE Server that validates both kie server and all extensions, optionally produces report
     *
     * @param report optional report flag to return detailed report of the check, defaults to false
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public healthcheck(report?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<Message>>;
    public healthcheck(report?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Message>>>;
    public healthcheck(report?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Message>>>;
    public healthcheck(report?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (report !== undefined && report !== null) {
            queryParameters = queryParameters.set('report', <any>report);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Message>>(`${this.basePath}/server/healthcheck`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns a list of KIE containers on the KIE Server.
     *
     * @param groupId optional groupId to filter containers by
     * @param artifactId optional artifactId to filter containers by
     * @param version optional version to filter containers by
     * @param status optional status to filter containers by
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listContainers(groupId?: string, artifactId?: string, version?: string, status?: string, observe?: 'body', reportProgress?: boolean): Observable<ServiceResponse>;
    public listContainers(groupId?: string, artifactId?: string, version?: string, status?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ServiceResponse>>;
    public listContainers(groupId?: string, artifactId?: string, version?: string, status?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ServiceResponse>>;
    public listContainers(groupId?: string, artifactId?: string, version?: string, status?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (groupId !== undefined && groupId !== null) {
            queryParameters = queryParameters.set('groupId', <any>groupId);
        }
        if (artifactId !== undefined && artifactId !== null) {
            queryParameters = queryParameters.set('artifactId', <any>artifactId);
        }
        if (version !== undefined && version !== null) {
            queryParameters = queryParameters.set('version', <any>version);
        }
        if (status !== undefined && status !== null) {
            queryParameters = queryParameters.set('status', <any>status);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ServiceResponse>(`${this.basePath}/server/containers`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Readiness check for KIE Server that indicates that server is fully booted and ready to accept requests
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public readycheck(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public readycheck(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public readycheck(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public readycheck(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/server/readycheck`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates release ID information (group ID, artifact ID, version) for a specified KIE container.
     *
     * @param containerId Container id that release id should be upgraded
     * @param body Release Id to be upgraded to as ReleaseId type
     * @param resetBeforeUpdate Determines whether active processes are aborted (reset) before updating when the server runs in development mode
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateReleaseId(containerId: string, body: string, resetBeforeUpdate?: boolean, observe?: 'body', reportProgress?: boolean): Observable<ServiceResponse>;
    public updateReleaseId(containerId: string, body: string, resetBeforeUpdate?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ServiceResponse>>;
    public updateReleaseId(containerId: string, body: string, resetBeforeUpdate?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ServiceResponse>>;
    public updateReleaseId(containerId: string, body: string, resetBeforeUpdate?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling updateReleaseId.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateReleaseId.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (resetBeforeUpdate !== undefined && resetBeforeUpdate !== null) {
            queryParameters = queryParameters.set('resetBeforeUpdate', <any>resetBeforeUpdate);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ServiceResponse>(`${this.basePath}/server/containers/${encodeURIComponent(String(containerId))}/release-id`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Starts or stops a KIE scanner that controls polling for updated KIE container deployments, if applicable.
     *
     * @param containerId Container id for scanner to be updated
     * @param body Scanner information given as KieScannerResource type
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateScanner(containerId: string, body: string, observe?: 'body', reportProgress?: boolean): Observable<ServiceResponse>;
    public updateScanner(containerId: string, body: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ServiceResponse>>;
    public updateScanner(containerId: string, body: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ServiceResponse>>;
    public updateScanner(containerId: string, body: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling updateScanner.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateScanner.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ServiceResponse>(`${this.basePath}/server/containers/${encodeURIComponent(String(containerId))}/scanner`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
