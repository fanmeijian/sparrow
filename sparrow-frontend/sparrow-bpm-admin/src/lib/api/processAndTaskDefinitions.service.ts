/**
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { AssociatedEntitiesDefinition } from '../model/associatedEntitiesDefinition';
import { ProcessDefinition } from '../model/processDefinition';
import { ServiceTasksDefinition } from '../model/serviceTasksDefinition';
import { SubProcessesDefinition } from '../model/subProcessesDefinition';
import { TaskInputsDefinition } from '../model/taskInputsDefinition';
import { TaskOutputsDefinition } from '../model/taskOutputsDefinition';
import { UserTaskDefinitionList } from '../model/userTaskDefinitionList';
import { VariablesDefinition } from '../model/variablesDefinition';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ProcessAndTaskDefinitionsService {

    protected basePath = 'https://localhost/bpm/rest';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Retrieves actors and groups that are involved in given process and container
     *
     * @param containerId container id where the process definition resides
     * @param processId process id that the involved actors and groups should be retrieved from
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAssociatedEntities(containerId: string, processId: string, observe?: 'body', reportProgress?: boolean): Observable<AssociatedEntitiesDefinition>;
    public getAssociatedEntities(containerId: string, processId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AssociatedEntitiesDefinition>>;
    public getAssociatedEntities(containerId: string, processId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AssociatedEntitiesDefinition>>;
    public getAssociatedEntities(containerId: string, processId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling getAssociatedEntities.');
        }

        if (processId === null || processId === undefined) {
            throw new Error('Required parameter processId was null or undefined when calling getAssociatedEntities.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<AssociatedEntitiesDefinition>(`${this.basePath}/server/containers/${encodeURIComponent(String(containerId))}/processes/definitions/${encodeURIComponent(String(processId))}/entities`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns entity and task information for a specified process.
     *
     * @param containerId container id where the process definition resides
     * @param processId process id that the definition should be retrieved for
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getProcessDefinition(containerId: string, processId: string, observe?: 'body', reportProgress?: boolean): Observable<ProcessDefinition>;
    public getProcessDefinition(containerId: string, processId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ProcessDefinition>>;
    public getProcessDefinition(containerId: string, processId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ProcessDefinition>>;
    public getProcessDefinition(containerId: string, processId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling getProcessDefinition.');
        }

        if (processId === null || processId === undefined) {
            throw new Error('Required parameter processId was null or undefined when calling getProcessDefinition.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ProcessDefinition>(`${this.basePath}/server/containers/${encodeURIComponent(String(containerId))}/processes/definitions/${encodeURIComponent(String(processId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves process variables definitions that are present in given process and container
     *
     * @param containerId container id where the process definition resides
     * @param processId process id that the variable definitions should be retrieved from
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getProcessVariables(containerId: string, processId: string, observe?: 'body', reportProgress?: boolean): Observable<VariablesDefinition>;
    public getProcessVariables(containerId: string, processId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<VariablesDefinition>>;
    public getProcessVariables(containerId: string, processId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<VariablesDefinition>>;
    public getProcessVariables(containerId: string, processId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling getProcessVariables.');
        }

        if (processId === null || processId === undefined) {
            throw new Error('Required parameter processId was null or undefined when calling getProcessVariables.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<VariablesDefinition>(`${this.basePath}/server/containers/${encodeURIComponent(String(containerId))}/processes/definitions/${encodeURIComponent(String(processId))}/variables`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves sub process definitions that are defined in given process within given container
     *
     * @param containerId container id where the process definition resides
     * @param processId process id that subprocesses should be retrieved from
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getReusableSubProcesses(containerId: string, processId: string, observe?: 'body', reportProgress?: boolean): Observable<SubProcessesDefinition>;
    public getReusableSubProcesses(containerId: string, processId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SubProcessesDefinition>>;
    public getReusableSubProcesses(containerId: string, processId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SubProcessesDefinition>>;
    public getReusableSubProcesses(containerId: string, processId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling getReusableSubProcesses.');
        }

        if (processId === null || processId === undefined) {
            throw new Error('Required parameter processId was null or undefined when calling getReusableSubProcesses.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<SubProcessesDefinition>(`${this.basePath}/server/containers/${encodeURIComponent(String(containerId))}/processes/definitions/${encodeURIComponent(String(processId))}/subprocesses`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves service tasks definitions that are present in given process and container
     *
     * @param containerId container id where the process definition resides
     * @param processId process id that the service task definitions should be retrieved from
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getServiceTasks(containerId: string, processId: string, observe?: 'body', reportProgress?: boolean): Observable<ServiceTasksDefinition>;
    public getServiceTasks(containerId: string, processId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ServiceTasksDefinition>>;
    public getServiceTasks(containerId: string, processId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ServiceTasksDefinition>>;
    public getServiceTasks(containerId: string, processId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling getServiceTasks.');
        }

        if (processId === null || processId === undefined) {
            throw new Error('Required parameter processId was null or undefined when calling getServiceTasks.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ServiceTasksDefinition>(`${this.basePath}/server/containers/${encodeURIComponent(String(containerId))}/processes/definitions/${encodeURIComponent(String(processId))}/tasks/service`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves input variables defined on a given user task
     *
     * @param containerId container id where the process definition resides
     * @param processId process id that given task belongs to
     * @param taskName task name that input variable definitions should be retrieved for
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTaskInputMappings(containerId: string, processId: string, taskName: string, observe?: 'body', reportProgress?: boolean): Observable<TaskInputsDefinition>;
    public getTaskInputMappings(containerId: string, processId: string, taskName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TaskInputsDefinition>>;
    public getTaskInputMappings(containerId: string, processId: string, taskName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TaskInputsDefinition>>;
    public getTaskInputMappings(containerId: string, processId: string, taskName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling getTaskInputMappings.');
        }

        if (processId === null || processId === undefined) {
            throw new Error('Required parameter processId was null or undefined when calling getTaskInputMappings.');
        }

        if (taskName === null || taskName === undefined) {
            throw new Error('Required parameter taskName was null or undefined when calling getTaskInputMappings.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<TaskInputsDefinition>(`${this.basePath}/server/containers/${encodeURIComponent(String(containerId))}/processes/definitions/${encodeURIComponent(String(processId))}/tasks/users/${encodeURIComponent(String(taskName))}/inputs`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves output variables defined on a given user task
     *
     * @param containerId container id where the process definition resides
     * @param processId process id that given task belongs to
     * @param taskName task name that output variable definitions should be retrieved for
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTaskOutputMappings(containerId: string, processId: string, taskName: string, observe?: 'body', reportProgress?: boolean): Observable<TaskOutputsDefinition>;
    public getTaskOutputMappings(containerId: string, processId: string, taskName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TaskOutputsDefinition>>;
    public getTaskOutputMappings(containerId: string, processId: string, taskName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TaskOutputsDefinition>>;
    public getTaskOutputMappings(containerId: string, processId: string, taskName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling getTaskOutputMappings.');
        }

        if (processId === null || processId === undefined) {
            throw new Error('Required parameter processId was null or undefined when calling getTaskOutputMappings.');
        }

        if (taskName === null || taskName === undefined) {
            throw new Error('Required parameter taskName was null or undefined when calling getTaskOutputMappings.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<TaskOutputsDefinition>(`${this.basePath}/server/containers/${encodeURIComponent(String(containerId))}/processes/definitions/${encodeURIComponent(String(processId))}/tasks/users/${encodeURIComponent(String(taskName))}/outputs`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves user tasks definitions that are present in given process and container
     *
     * @param containerId container id where the process definition resides
     * @param processId process id that the user task definitions should be retrieved from
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTasksDefinitions(containerId: string, processId: string, observe?: 'body', reportProgress?: boolean): Observable<UserTaskDefinitionList>;
    public getTasksDefinitions(containerId: string, processId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserTaskDefinitionList>>;
    public getTasksDefinitions(containerId: string, processId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserTaskDefinitionList>>;
    public getTasksDefinitions(containerId: string, processId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling getTasksDefinitions.');
        }

        if (processId === null || processId === undefined) {
            throw new Error('Required parameter processId was null or undefined when calling getTasksDefinitions.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<UserTaskDefinitionList>(`${this.basePath}/server/containers/${encodeURIComponent(String(containerId))}/processes/definitions/${encodeURIComponent(String(processId))}/tasks/users`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
