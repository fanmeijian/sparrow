/**
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';


import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ProcessAndTaskFormsService {

    protected basePath = 'https://localhost/bpm/rest';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Returns the rendered form for a specified case definition.
     *
     * @param containerId container id that case definition belongs to
     * @param caseDefId identifier of case definition that form should be fetched for
     * @param renderer optional renderer name that the form should be rendered with
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCaseRenderedForm(containerId: string, caseDefId: string, renderer?: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getCaseRenderedForm(containerId: string, caseDefId: string, renderer?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getCaseRenderedForm(containerId: string, caseDefId: string, renderer?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getCaseRenderedForm(containerId: string, caseDefId: string, renderer?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling getCaseRenderedForm.');
        }

        if (caseDefId === null || caseDefId === undefined) {
            throw new Error('Required parameter caseDefId was null or undefined when calling getCaseRenderedForm.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (renderer !== undefined && renderer !== null) {
            queryParameters = queryParameters.set('renderer', <any>renderer);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.basePath}/server/containers/${encodeURIComponent(String(containerId))}/forms/cases/${encodeURIComponent(String(caseDefId))}/content`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns the form information for a specified process definition.
     *
     * @param containerId container id that process definition belongs to
     * @param processId identifier of process definition that form should be fetched for
     * @param lang optional language that the form should be found for
     * @param filter optional filter flag if form should be filtered or returned as is
     * @param type optional type of the form, defaults to ANY so system will find the most current one
     * @param marshallContent optional marshall content flag if the content should be transformed or not, defaults to true
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getProcessForm(containerId: string, processId: string, lang?: string, filter?: boolean, type?: string, marshallContent?: boolean, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getProcessForm(containerId: string, processId: string, lang?: string, filter?: boolean, type?: string, marshallContent?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getProcessForm(containerId: string, processId: string, lang?: string, filter?: boolean, type?: string, marshallContent?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getProcessForm(containerId: string, processId: string, lang?: string, filter?: boolean, type?: string, marshallContent?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling getProcessForm.');
        }

        if (processId === null || processId === undefined) {
            throw new Error('Required parameter processId was null or undefined when calling getProcessForm.');
        }





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (lang !== undefined && lang !== null) {
            queryParameters = queryParameters.set('lang', <any>lang);
        }
        if (filter !== undefined && filter !== null) {
            queryParameters = queryParameters.set('filter', <any>filter);
        }
        if (type !== undefined && type !== null) {
            queryParameters = queryParameters.set('type', <any>type);
        }
        if (marshallContent !== undefined && marshallContent !== null) {
            queryParameters = queryParameters.set('marshallContent', <any>marshallContent);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xml',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.basePath}/server/containers/${encodeURIComponent(String(containerId))}/forms/processes/${encodeURIComponent(String(processId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns the rendered form for a specified process definition
     *
     * @param containerId container id that process definition belongs to
     * @param processId identifier of process definition that form should be fetched for
     * @param renderer optional renderer name that the form should be rendered with
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getProcessRenderedForm(containerId: string, processId: string, renderer?: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getProcessRenderedForm(containerId: string, processId: string, renderer?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getProcessRenderedForm(containerId: string, processId: string, renderer?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getProcessRenderedForm(containerId: string, processId: string, renderer?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling getProcessRenderedForm.');
        }

        if (processId === null || processId === undefined) {
            throw new Error('Required parameter processId was null or undefined when calling getProcessRenderedForm.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (renderer !== undefined && renderer !== null) {
            queryParameters = queryParameters.set('renderer', <any>renderer);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.basePath}/server/containers/${encodeURIComponent(String(containerId))}/forms/processes/${encodeURIComponent(String(processId))}/content`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns the form information for a specified task instance.
     *
     * @param containerId container id that task instance belongs to
     * @param taskInstanceId identifier of task instance that form should be fetched for
     * @param lang optional language that the form should be found for
     * @param filter optional filter flag if form should be filtered or returned as is
     * @param type optional type of the form, defaults to ANY so system will find the most current one
     * @param marshallContent optional marshall content flag if the content should be transformed or not, defaults to true
     * @param user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTaskForm(containerId: string, taskInstanceId: number, lang?: string, filter?: boolean, type?: string, marshallContent?: boolean, user?: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getTaskForm(containerId: string, taskInstanceId: number, lang?: string, filter?: boolean, type?: string, marshallContent?: boolean, user?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getTaskForm(containerId: string, taskInstanceId: number, lang?: string, filter?: boolean, type?: string, marshallContent?: boolean, user?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getTaskForm(containerId: string, taskInstanceId: number, lang?: string, filter?: boolean, type?: string, marshallContent?: boolean, user?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling getTaskForm.');
        }

        if (taskInstanceId === null || taskInstanceId === undefined) {
            throw new Error('Required parameter taskInstanceId was null or undefined when calling getTaskForm.');
        }






        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (lang !== undefined && lang !== null) {
            queryParameters = queryParameters.set('lang', <any>lang);
        }
        if (filter !== undefined && filter !== null) {
            queryParameters = queryParameters.set('filter', <any>filter);
        }
        if (type !== undefined && type !== null) {
            queryParameters = queryParameters.set('type', <any>type);
        }
        if (marshallContent !== undefined && marshallContent !== null) {
            queryParameters = queryParameters.set('marshallContent', <any>marshallContent);
        }
        if (user !== undefined && user !== null) {
            queryParameters = queryParameters.set('user', <any>user);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xml',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.basePath}/server/containers/${encodeURIComponent(String(containerId))}/forms/tasks/${encodeURIComponent(String(taskInstanceId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns the rendered form for a specified task instance.
     *
     * @param containerId container id that task instance belongs to
     * @param taskInstanceId identifier of task instance that form should be fetched for
     * @param renderer optional renderer name that the form should be rendered with
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTaskRenderedForm(containerId: string, taskInstanceId: number, renderer?: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getTaskRenderedForm(containerId: string, taskInstanceId: number, renderer?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getTaskRenderedForm(containerId: string, taskInstanceId: number, renderer?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getTaskRenderedForm(containerId: string, taskInstanceId: number, renderer?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling getTaskRenderedForm.');
        }

        if (taskInstanceId === null || taskInstanceId === undefined) {
            throw new Error('Required parameter taskInstanceId was null or undefined when calling getTaskRenderedForm.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (renderer !== undefined && renderer !== null) {
            queryParameters = queryParameters.set('renderer', <any>renderer);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.basePath}/server/containers/${encodeURIComponent(String(containerId))}/forms/tasks/${encodeURIComponent(String(taskInstanceId))}/content`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
