/**
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';


import { ExecutionErrorInstance } from '../model/executionErrorInstance';
import { ExecutionErrorInstanceList } from '../model/executionErrorInstanceList';
import { MigrationReportInstance } from '../model/migrationReportInstance';
import { MigrationReportInstanceList } from '../model/migrationReportInstanceList';
import { NodeInstanceList } from '../model/nodeInstanceList';
import { ProcessNodeList } from '../model/processNodeList';
import { TimerInstanceList } from '../model/timerInstanceList';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { Observable } from 'rxjs';


@Injectable()
export class ProcessInstanceAdministrationService {

    protected basePath = 'https://localhost/bpm/rest';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Acknowledges a specified process execution error (sets acknowledged to true for the error).
     *
     * @param containerId container id that error belongs to
     * @param errorId identifier of error to be acknowledged
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public acknowledgeError(containerId: string, errorId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public acknowledgeError(containerId: string, errorId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public acknowledgeError(containerId: string, errorId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public acknowledgeError(containerId: string, errorId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling acknowledgeError.');
        }

        if (errorId === null || errorId === undefined) {
            throw new Error('Required parameter errorId was null or undefined when calling acknowledgeError.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.put<any>(`${this.basePath}/server/admin/containers/${encodeURIComponent(String(containerId))}/processes/errors/${encodeURIComponent(String(errorId))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Acknowledges multiple process execution errors (sets acknowledged to true for the errors).
     *
     * @param containerId container id that errors belong to
     * @param errorId list of error identifiers to be acknowledged
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public acknowledgeErrors(containerId: string, errorId: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public acknowledgeErrors(containerId: string, errorId: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public acknowledgeErrors(containerId: string, errorId: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public acknowledgeErrors(containerId: string, errorId: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling acknowledgeErrors.');
        }

        if (errorId === null || errorId === undefined) {
            throw new Error('Required parameter errorId was null or undefined when calling acknowledgeErrors.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (errorId) {
            errorId.forEach((element) => {
                queryParameters = queryParameters.append('errorId', <any>element);
            })
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.put<any>(`${this.basePath}/server/admin/containers/${encodeURIComponent(String(containerId))}/processes/errors`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Aborts a specified node instance within a specified process instance.
     *
     * @param containerId container id that process instance belongs to
     * @param processInstanceId identifier of process instance that node instance belongs to
     * @param nodeInstanceId identifier of node instance that should be canceled
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cancelNodeInstance(containerId: string, processInstanceId: number, nodeInstanceId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public cancelNodeInstance(containerId: string, processInstanceId: number, nodeInstanceId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public cancelNodeInstance(containerId: string, processInstanceId: number, nodeInstanceId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public cancelNodeInstance(containerId: string, processInstanceId: number, nodeInstanceId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling cancelNodeInstance.');
        }

        if (processInstanceId === null || processInstanceId === undefined) {
            throw new Error('Required parameter processInstanceId was null or undefined when calling cancelNodeInstance.');
        }

        if (nodeInstanceId === null || nodeInstanceId === undefined) {
            throw new Error('Required parameter nodeInstanceId was null or undefined when calling cancelNodeInstance.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/server/admin/containers/${encodeURIComponent(String(containerId))}/processes/instances/${encodeURIComponent(String(processInstanceId))}/nodeinstances/${encodeURIComponent(String(nodeInstanceId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns all the active node instances in a specified process instance.
     *
     * @param containerId container id that process instance belongs to
     * @param processInstanceId identifier of process instance that active nodes instances should be collected for
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getActiveNodeInstances(containerId: string, processInstanceId: number, observe?: 'body', reportProgress?: boolean): Observable<NodeInstanceList>;
    public getActiveNodeInstances(containerId: string, processInstanceId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<NodeInstanceList>>;
    public getActiveNodeInstances(containerId: string, processInstanceId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<NodeInstanceList>>;
    public getActiveNodeInstances(containerId: string, processInstanceId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling getActiveNodeInstances.');
        }

        if (processInstanceId === null || processInstanceId === undefined) {
            throw new Error('Required parameter processInstanceId was null or undefined when calling getActiveNodeInstances.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<NodeInstanceList>(`${this.basePath}/server/admin/containers/${encodeURIComponent(String(containerId))}/processes/instances/${encodeURIComponent(String(processInstanceId))}/nodeinstances`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns information about a specified process execution error.
     *
     * @param containerId container id that process error belongs to
     * @param errorId identifier of error to be loaded
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getExecutionErrorById(containerId: string, errorId: string, observe?: 'body', reportProgress?: boolean): Observable<ExecutionErrorInstance>;
    public getExecutionErrorById(containerId: string, errorId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ExecutionErrorInstance>>;
    public getExecutionErrorById(containerId: string, errorId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ExecutionErrorInstance>>;
    public getExecutionErrorById(containerId: string, errorId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling getExecutionErrorById.');
        }

        if (errorId === null || errorId === undefined) {
            throw new Error('Required parameter errorId was null or undefined when calling getExecutionErrorById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ExecutionErrorInstance>(`${this.basePath}/server/admin/containers/${encodeURIComponent(String(containerId))}/processes/errors/${encodeURIComponent(String(errorId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns all process execution errors for a specified KIE container.
     *
     * @param containerId container id that errors belong to
     * @param includeAck optional flag that indicates if acknowledged errors should also be collected, defaults to false
     * @param page optional pagination - at which page to start, defaults to 0 (meaning first)
     * @param pageSize optional pagination - size of the result, defaults to 10
     * @param sort optional sort column, no default
     * @param sortOrder optional sort direction (asc, desc) - defaults to asc
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getExecutionErrors(containerId: string, includeAck?: boolean, page?: number, pageSize?: number, sort?: string, sortOrder?: boolean, observe?: 'body', reportProgress?: boolean): Observable<ExecutionErrorInstanceList>;
    public getExecutionErrors(containerId: string, includeAck?: boolean, page?: number, pageSize?: number, sort?: string, sortOrder?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ExecutionErrorInstanceList>>;
    public getExecutionErrors(containerId: string, includeAck?: boolean, page?: number, pageSize?: number, sort?: string, sortOrder?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ExecutionErrorInstanceList>>;
    public getExecutionErrors(containerId: string, includeAck?: boolean, page?: number, pageSize?: number, sort?: string, sortOrder?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling getExecutionErrors.');
        }






        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (includeAck !== undefined && includeAck !== null) {
            queryParameters = queryParameters.set('includeAck', <any>includeAck);
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (sortOrder !== undefined && sortOrder !== null) {
            queryParameters = queryParameters.set('sortOrder', <any>sortOrder);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ExecutionErrorInstanceList>(`${this.basePath}/server/admin/containers/${encodeURIComponent(String(containerId))}/processes/errors`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns all process execution errors for a specified process instance.
     *
     * @param containerId container id that process instance belongs to
     * @param processInstanceId identifier of process instance that errors should be collected for
     * @param includeAck optional flag that indicates if acknowledged errors should also be collected, defaults to false
     * @param node optional name of the node in the process instance to filter by
     * @param page optional pagination - at which page to start, defaults to 0 (meaning first)
     * @param pageSize optional pagination - size of the result, defaults to 10
     * @param sort optional sort column, no default
     * @param sortOrder optional sort direction (asc, desc) - defaults to asc
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getExecutionErrorsByProcessInstance(containerId: string, processInstanceId: number, includeAck?: boolean, node?: string, page?: number, pageSize?: number, sort?: string, sortOrder?: boolean, observe?: 'body', reportProgress?: boolean): Observable<ExecutionErrorInstanceList>;
    public getExecutionErrorsByProcessInstance(containerId: string, processInstanceId: number, includeAck?: boolean, node?: string, page?: number, pageSize?: number, sort?: string, sortOrder?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ExecutionErrorInstanceList>>;
    public getExecutionErrorsByProcessInstance(containerId: string, processInstanceId: number, includeAck?: boolean, node?: string, page?: number, pageSize?: number, sort?: string, sortOrder?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ExecutionErrorInstanceList>>;
    public getExecutionErrorsByProcessInstance(containerId: string, processInstanceId: number, includeAck?: boolean, node?: string, page?: number, pageSize?: number, sort?: string, sortOrder?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling getExecutionErrorsByProcessInstance.');
        }

        if (processInstanceId === null || processInstanceId === undefined) {
            throw new Error('Required parameter processInstanceId was null or undefined when calling getExecutionErrorsByProcessInstance.');
        }







        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (includeAck !== undefined && includeAck !== null) {
            queryParameters = queryParameters.set('includeAck', <any>includeAck);
        }
        if (node !== undefined && node !== null) {
            queryParameters = queryParameters.set('node', <any>node);
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (sortOrder !== undefined && sortOrder !== null) {
            queryParameters = queryParameters.set('sortOrder', <any>sortOrder);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ExecutionErrorInstanceList>(`${this.basePath}/server/admin/containers/${encodeURIComponent(String(containerId))}/processes/instances/${encodeURIComponent(String(processInstanceId))}/errors`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns all nodes in a specified process instance.
     *
     * @param containerId container id that process instance belongs to
     * @param processInstanceId identifier of process instance that process nodes should be collected from
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getNodes(containerId: string, processInstanceId: number, observe?: 'body', reportProgress?: boolean): Observable<ProcessNodeList>;
    public getNodes(containerId: string, processInstanceId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ProcessNodeList>>;
    public getNodes(containerId: string, processInstanceId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ProcessNodeList>>;
    public getNodes(containerId: string, processInstanceId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling getNodes.');
        }

        if (processInstanceId === null || processInstanceId === undefined) {
            throw new Error('Required parameter processInstanceId was null or undefined when calling getNodes.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ProcessNodeList>(`${this.basePath}/server/admin/containers/${encodeURIComponent(String(containerId))}/processes/instances/${encodeURIComponent(String(processInstanceId))}/nodes`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns all timers for a specified process instance.
     *
     * @param containerId container id that process instance belongs to
     * @param processInstanceId identifier of process instance that timer instances should be collected for
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTimerInstances(containerId: string, processInstanceId: number, observe?: 'body', reportProgress?: boolean): Observable<TimerInstanceList>;
    public getTimerInstances(containerId: string, processInstanceId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TimerInstanceList>>;
    public getTimerInstances(containerId: string, processInstanceId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TimerInstanceList>>;
    public getTimerInstances(containerId: string, processInstanceId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling getTimerInstances.');
        }

        if (processInstanceId === null || processInstanceId === undefined) {
            throw new Error('Required parameter processInstanceId was null or undefined when calling getTimerInstances.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<TimerInstanceList>(`${this.basePath}/server/admin/containers/${encodeURIComponent(String(containerId))}/processes/instances/${encodeURIComponent(String(processInstanceId))}/timers`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Migrates a specified process instance to a process definition in another KIE container.
     *
     * @param containerId container id that process instance belongs to
     * @param processInstanceId identifier of process instance to be migrated
     * @param targetContainerId container id that new process definition belongs to
     * @param targetProcessId process definition that process instance should be migrated to
     * @param body node mapping - unique ids of old definition to new definition given as Map
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public migrateProcessInstance(containerId: string, processInstanceId: number, targetContainerId: string, targetProcessId: string, body?: string, observe?: 'body', reportProgress?: boolean): Observable<MigrationReportInstance>;
    public migrateProcessInstance(containerId: string, processInstanceId: number, targetContainerId: string, targetProcessId: string, body?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MigrationReportInstance>>;
    public migrateProcessInstance(containerId: string, processInstanceId: number, targetContainerId: string, targetProcessId: string, body?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MigrationReportInstance>>;
    public migrateProcessInstance(containerId: string, processInstanceId: number, targetContainerId: string, targetProcessId: string, body?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling migrateProcessInstance.');
        }

        if (processInstanceId === null || processInstanceId === undefined) {
            throw new Error('Required parameter processInstanceId was null or undefined when calling migrateProcessInstance.');
        }

        if (targetContainerId === null || targetContainerId === undefined) {
            throw new Error('Required parameter targetContainerId was null or undefined when calling migrateProcessInstance.');
        }

        if (targetProcessId === null || targetProcessId === undefined) {
            throw new Error('Required parameter targetProcessId was null or undefined when calling migrateProcessInstance.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (targetContainerId !== undefined && targetContainerId !== null) {
            queryParameters = queryParameters.set('targetContainerId', <any>targetContainerId);
        }
        if (targetProcessId !== undefined && targetProcessId !== null) {
            queryParameters = queryParameters.set('targetProcessId', <any>targetProcessId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<MigrationReportInstance>(`${this.basePath}/server/admin/containers/${encodeURIComponent(String(containerId))}/processes/instances/${encodeURIComponent(String(processInstanceId))}`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Migrates a specified process instance with all subprocesses to process definition in another KIE container.
     *
     * @param containerId container id that process instances belongs to
     * @param processInstanceId list of identifiers of process instance to be migrated
     * @param targetContainerId container id that new process definition belongs to
     * @param targetProcessId process definition that process instances should be migrated to
     * @param body migration specifcation. It contains process mapping and node mapping - unique ids of old definition to new definition given as Map
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public migrateProcessInstanceWithSubprocess(containerId: string, processInstanceId: number, targetContainerId: string, targetProcessId: string, body?: string, observe?: 'body', reportProgress?: boolean): Observable<MigrationReportInstanceList>;
    public migrateProcessInstanceWithSubprocess(containerId: string, processInstanceId: number, targetContainerId: string, targetProcessId: string, body?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MigrationReportInstanceList>>;
    public migrateProcessInstanceWithSubprocess(containerId: string, processInstanceId: number, targetContainerId: string, targetProcessId: string, body?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MigrationReportInstanceList>>;
    public migrateProcessInstanceWithSubprocess(containerId: string, processInstanceId: number, targetContainerId: string, targetProcessId: string, body?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling migrateProcessInstanceWithSubprocess.');
        }

        if (processInstanceId === null || processInstanceId === undefined) {
            throw new Error('Required parameter processInstanceId was null or undefined when calling migrateProcessInstanceWithSubprocess.');
        }

        if (targetContainerId === null || targetContainerId === undefined) {
            throw new Error('Required parameter targetContainerId was null or undefined when calling migrateProcessInstanceWithSubprocess.');
        }

        if (targetProcessId === null || targetProcessId === undefined) {
            throw new Error('Required parameter targetProcessId was null or undefined when calling migrateProcessInstanceWithSubprocess.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (targetContainerId !== undefined && targetContainerId !== null) {
            queryParameters = queryParameters.set('targetContainerId', <any>targetContainerId);
        }
        if (targetProcessId !== undefined && targetProcessId !== null) {
            queryParameters = queryParameters.set('targetProcessId', <any>targetProcessId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<MigrationReportInstanceList>(`${this.basePath}/server/admin/containers/${encodeURIComponent(String(containerId))}/processes/instances/${encodeURIComponent(String(processInstanceId))}/subprocess`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Migrates multiple process instances to process definition in another KIE container.
     *
     * @param containerId container id that process instances belongs to
     * @param processInstanceId list of identifiers of process instance to be migrated
     * @param targetContainerId container id that new process definition belongs to
     * @param targetProcessId process definition that process instances should be migrated to
     * @param body node mapping - unique ids of old definition to new definition given as Map
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public migrateProcessInstances(containerId: string, processInstanceId: Array<number>, targetContainerId: string, targetProcessId: string, body?: string, observe?: 'body', reportProgress?: boolean): Observable<MigrationReportInstanceList>;
    public migrateProcessInstances(containerId: string, processInstanceId: Array<number>, targetContainerId: string, targetProcessId: string, body?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MigrationReportInstanceList>>;
    public migrateProcessInstances(containerId: string, processInstanceId: Array<number>, targetContainerId: string, targetProcessId: string, body?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MigrationReportInstanceList>>;
    public migrateProcessInstances(containerId: string, processInstanceId: Array<number>, targetContainerId: string, targetProcessId: string, body?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling migrateProcessInstances.');
        }

        if (processInstanceId === null || processInstanceId === undefined) {
            throw new Error('Required parameter processInstanceId was null or undefined when calling migrateProcessInstances.');
        }

        if (targetContainerId === null || targetContainerId === undefined) {
            throw new Error('Required parameter targetContainerId was null or undefined when calling migrateProcessInstances.');
        }

        if (targetProcessId === null || targetProcessId === undefined) {
            throw new Error('Required parameter targetProcessId was null or undefined when calling migrateProcessInstances.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (processInstanceId) {
            processInstanceId.forEach((element) => {
                queryParameters = queryParameters.append('processInstanceId', <any>element);
            })
        }
        if (targetContainerId !== undefined && targetContainerId !== null) {
            queryParameters = queryParameters.set('targetContainerId', <any>targetContainerId);
        }
        if (targetProcessId !== undefined && targetProcessId !== null) {
            queryParameters = queryParameters.set('targetProcessId', <any>targetProcessId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<MigrationReportInstanceList>(`${this.basePath}/server/admin/containers/${encodeURIComponent(String(containerId))}/processes/instances`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Re-triggers a specified node instance for a specified process instance. If the node is not active in the process instance, it becomes active upon re-triggering.
     *
     * @param containerId container id that process instance belongs to
     * @param processInstanceId identifier of process instance that node instance belongs to
     * @param nodeInstanceId identifier of node instance that should be retriggered
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public retriggerNodeInstance(containerId: string, processInstanceId: number, nodeInstanceId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public retriggerNodeInstance(containerId: string, processInstanceId: number, nodeInstanceId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public retriggerNodeInstance(containerId: string, processInstanceId: number, nodeInstanceId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public retriggerNodeInstance(containerId: string, processInstanceId: number, nodeInstanceId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling retriggerNodeInstance.');
        }

        if (processInstanceId === null || processInstanceId === undefined) {
            throw new Error('Required parameter processInstanceId was null or undefined when calling retriggerNodeInstance.');
        }

        if (nodeInstanceId === null || nodeInstanceId === undefined) {
            throw new Error('Required parameter nodeInstanceId was null or undefined when calling retriggerNodeInstance.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.put<any>(`${this.basePath}/server/admin/containers/${encodeURIComponent(String(containerId))}/processes/instances/${encodeURIComponent(String(processInstanceId))}/nodeinstances/${encodeURIComponent(String(nodeInstanceId))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Triggers a specified node for a specified process instance. If the node is not active in the process instance, it becomes active upon triggering.
     *
     * @param containerId container id that process instance belongs to
     * @param processInstanceId identifier of process instance where node should be triggered
     * @param nodeId identifier of the node to be triggered
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public triggerNode(containerId: string, processInstanceId: number, nodeId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public triggerNode(containerId: string, processInstanceId: number, nodeId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public triggerNode(containerId: string, processInstanceId: number, nodeId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public triggerNode(containerId: string, processInstanceId: number, nodeId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling triggerNode.');
        }

        if (processInstanceId === null || processInstanceId === undefined) {
            throw new Error('Required parameter processInstanceId was null or undefined when calling triggerNode.');
        }

        if (nodeId === null || nodeId === undefined) {
            throw new Error('Required parameter nodeId was null or undefined when calling triggerNode.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/server/admin/containers/${encodeURIComponent(String(containerId))}/processes/instances/${encodeURIComponent(String(processInstanceId))}/nodes/${encodeURIComponent(String(nodeId))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates a specified timer for a specified process instance.
     *
     * @param containerId container id that process instance belongs to
     * @param processInstanceId identifier of process instance that timer belongs to
     * @param timerId identifier of timer instance to be updated
     * @param body Map of timer expressions - deplay, perios and repeat are allowed values in the map
     * @param relative optional flag that indicates if the time expression is relative to the current date or not, defaults to true
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateTimer(containerId: string, processInstanceId: number, timerId: number, body: string, relative?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateTimer(containerId: string, processInstanceId: number, timerId: number, body: string, relative?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateTimer(containerId: string, processInstanceId: number, timerId: number, body: string, relative?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateTimer(containerId: string, processInstanceId: number, timerId: number, body: string, relative?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling updateTimer.');
        }

        if (processInstanceId === null || processInstanceId === undefined) {
            throw new Error('Required parameter processInstanceId was null or undefined when calling updateTimer.');
        }

        if (timerId === null || timerId === undefined) {
            throw new Error('Required parameter timerId was null or undefined when calling updateTimer.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateTimer.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (relative !== undefined && relative !== null) {
            queryParameters = queryParameters.set('relative', <any>relative);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/server/admin/containers/${encodeURIComponent(String(containerId))}/processes/instances/${encodeURIComponent(String(processInstanceId))}/timers/${encodeURIComponent(String(timerId))}`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
