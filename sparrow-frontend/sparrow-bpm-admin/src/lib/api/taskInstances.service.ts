/**
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { TaskAttachment } from '../model/taskAttachment';
import { TaskAttachmentList } from '../model/taskAttachmentList';
import { TaskComment } from '../model/taskComment';
import { TaskCommentList } from '../model/taskCommentList';
import { TaskEventInstanceList } from '../model/taskEventInstanceList';
import { TaskInstance } from '../model/taskInstance';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class TaskInstancesService {

    protected basePath = 'https://localhost/bpm/rest';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Activates a specified task instance to be progressed.
     *
     * @param containerId container id that task instance belongs to
     * @param taskInstanceId identifier of the task instance that should be activated
     * @param user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public activate(containerId: string, taskInstanceId: number, user?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public activate(containerId: string, taskInstanceId: number, user?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public activate(containerId: string, taskInstanceId: number, user?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public activate(containerId: string, taskInstanceId: number, user?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling activate.');
        }

        if (taskInstanceId === null || taskInstanceId === undefined) {
            throw new Error('Required parameter taskInstanceId was null or undefined when calling activate.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (user !== undefined && user !== null) {
            queryParameters = queryParameters.set('user', <any>user);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.put<any>(`${this.basePath}/server/containers/${encodeURIComponent(String(containerId))}/tasks/${encodeURIComponent(String(taskInstanceId))}/states/activated`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Adds an attachment to a specified task instance and returns the ID of the new attachment.
     *
     * @param containerId container id that task instance belongs to
     * @param taskInstanceId identifier of the task instance that attachment should be added to
     * @param name name of the attachment to be added
     * @param body attachment content, any type can be provided
     * @param user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addAttachment(containerId: string, taskInstanceId: number, name: string, body: string, user?: string, observe?: 'body', reportProgress?: boolean): Observable<number>;
    public addAttachment(containerId: string, taskInstanceId: number, name: string, body: string, user?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;
    public addAttachment(containerId: string, taskInstanceId: number, name: string, body: string, user?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;
    public addAttachment(containerId: string, taskInstanceId: number, name: string, body: string, user?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling addAttachment.');
        }

        if (taskInstanceId === null || taskInstanceId === undefined) {
            throw new Error('Required parameter taskInstanceId was null or undefined when calling addAttachment.');
        }

        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling addAttachment.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling addAttachment.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (user !== undefined && user !== null) {
            queryParameters = queryParameters.set('user', <any>user);
        }
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<number>(`${this.basePath}/server/containers/${encodeURIComponent(String(containerId))}/tasks/${encodeURIComponent(String(taskInstanceId))}/attachments`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Adds a comment to a specified task instance and returns the ID of the new comment.
     *
     * @param containerId container id that task instance belongs to
     * @param taskInstanceId identifier of the task instance that comment should be added to
     * @param body comment data as TaskComment
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addComment1(containerId: string, taskInstanceId: number, body: string, observe?: 'body', reportProgress?: boolean): Observable<number>;
    public addComment1(containerId: string, taskInstanceId: number, body: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;
    public addComment1(containerId: string, taskInstanceId: number, body: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;
    public addComment1(containerId: string, taskInstanceId: number, body: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling addComment1.');
        }

        if (taskInstanceId === null || taskInstanceId === undefined) {
            throw new Error('Required parameter taskInstanceId was null or undefined when calling addComment1.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling addComment1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<number>(`${this.basePath}/server/containers/${encodeURIComponent(String(containerId))}/tasks/${encodeURIComponent(String(taskInstanceId))}/comments`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Claims (reserves) a specified task instance for the user sending the request.
     *
     * @param containerId container id that task instance belongs to
     * @param taskInstanceId identifier of the task instance that should be claimed
     * @param user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public claim(containerId: string, taskInstanceId: number, user?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public claim(containerId: string, taskInstanceId: number, user?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public claim(containerId: string, taskInstanceId: number, user?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public claim(containerId: string, taskInstanceId: number, user?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling claim.');
        }

        if (taskInstanceId === null || taskInstanceId === undefined) {
            throw new Error('Required parameter taskInstanceId was null or undefined when calling claim.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (user !== undefined && user !== null) {
            queryParameters = queryParameters.set('user', <any>user);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.put<any>(`${this.basePath}/server/containers/${encodeURIComponent(String(containerId))}/tasks/${encodeURIComponent(String(taskInstanceId))}/states/claimed`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Claims (reserves) multiple task instances for the user sending the request
     *
     * @param containerId container id that task instance belongs to
     * @param taskId identifiers of the task instances that should be claimed
     * @param user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public claimBulk(containerId: string, taskId: Array<number>, user?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public claimBulk(containerId: string, taskId: Array<number>, user?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public claimBulk(containerId: string, taskId: Array<number>, user?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public claimBulk(containerId: string, taskId: Array<number>, user?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling claimBulk.');
        }

        if (taskId === null || taskId === undefined) {
            throw new Error('Required parameter taskId was null or undefined when calling claimBulk.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (taskId) {
            taskId.forEach((element) => {
                queryParameters = queryParameters.append('taskId', <any>element);
            })
        }
        if (user !== undefined && user !== null) {
            queryParameters = queryParameters.set('user', <any>user);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/server/containers/${encodeURIComponent(String(containerId))}/tasks/states/claimed`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Completes a specified task instance.
     *
     * @param containerId container id that task instance belongs to
     * @param taskInstanceId identifier of the task instance that should be completed
     * @param user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
     * @param autoProgress optional flag that allows to directlu claim and start task (if needed) before completion
     * @param body optional map of output variables
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public complete(containerId: string, taskInstanceId: number, user?: string, autoProgress?: boolean, body?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public complete(containerId: string, taskInstanceId: number, user?: string, autoProgress?: boolean, body?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public complete(containerId: string, taskInstanceId: number, user?: string, autoProgress?: boolean, body?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public complete(containerId: string, taskInstanceId: number, user?: string, autoProgress?: boolean, body?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling complete.');
        }

        if (taskInstanceId === null || taskInstanceId === undefined) {
            throw new Error('Required parameter taskInstanceId was null or undefined when calling complete.');
        }




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (user !== undefined && user !== null) {
            queryParameters = queryParameters.set('user', <any>user);
        }
        if (autoProgress !== undefined && autoProgress !== null) {
            queryParameters = queryParameters.set('auto-progress', <any>autoProgress);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/server/containers/${encodeURIComponent(String(containerId))}/tasks/${encodeURIComponent(String(taskInstanceId))}/states/completed`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delegates a specified task instance to a specified target user as the new task owner.
     *
     * @param containerId container id that task instance belongs to
     * @param taskInstanceId identifier of the task instance that should be delegated
     * @param targetUser user that task should be dalegated to
     * @param user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public delegate(containerId: string, taskInstanceId: number, targetUser: string, user?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public delegate(containerId: string, taskInstanceId: number, targetUser: string, user?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public delegate(containerId: string, taskInstanceId: number, targetUser: string, user?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public delegate(containerId: string, taskInstanceId: number, targetUser: string, user?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling delegate.');
        }

        if (taskInstanceId === null || taskInstanceId === undefined) {
            throw new Error('Required parameter taskInstanceId was null or undefined when calling delegate.');
        }

        if (targetUser === null || targetUser === undefined) {
            throw new Error('Required parameter targetUser was null or undefined when calling delegate.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (user !== undefined && user !== null) {
            queryParameters = queryParameters.set('user', <any>user);
        }
        if (targetUser !== undefined && targetUser !== null) {
            queryParameters = queryParameters.set('targetUser', <any>targetUser);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.put<any>(`${this.basePath}/server/containers/${encodeURIComponent(String(containerId))}/tasks/${encodeURIComponent(String(taskInstanceId))}/states/delegated`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes a specified attachment from a specified task instance.
     *
     * @param containerId container id that task instance belongs to
     * @param taskInstanceId identifier of the task instance that attachment belongs to
     * @param attachmentId identifier of the attachment to be deleted
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteAttachment(containerId: string, taskInstanceId: number, attachmentId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteAttachment(containerId: string, taskInstanceId: number, attachmentId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteAttachment(containerId: string, taskInstanceId: number, attachmentId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteAttachment(containerId: string, taskInstanceId: number, attachmentId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling deleteAttachment.');
        }

        if (taskInstanceId === null || taskInstanceId === undefined) {
            throw new Error('Required parameter taskInstanceId was null or undefined when calling deleteAttachment.');
        }

        if (attachmentId === null || attachmentId === undefined) {
            throw new Error('Required parameter attachmentId was null or undefined when calling deleteAttachment.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/server/containers/${encodeURIComponent(String(containerId))}/tasks/${encodeURIComponent(String(taskInstanceId))}/attachments/${encodeURIComponent(String(attachmentId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes a specified comment from a specified task instance.
     *
     * @param containerId container id that task instance belongs to
     * @param taskInstanceId identifier of the task instance that comment belongs to
     * @param commentId identifier of the comment to be deleted
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteComment(containerId: string, taskInstanceId: number, commentId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteComment(containerId: string, taskInstanceId: number, commentId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteComment(containerId: string, taskInstanceId: number, commentId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteComment(containerId: string, taskInstanceId: number, commentId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling deleteComment.');
        }

        if (taskInstanceId === null || taskInstanceId === undefined) {
            throw new Error('Required parameter taskInstanceId was null or undefined when calling deleteComment.');
        }

        if (commentId === null || commentId === undefined) {
            throw new Error('Required parameter commentId was null or undefined when calling deleteComment.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/server/containers/${encodeURIComponent(String(containerId))}/tasks/${encodeURIComponent(String(taskInstanceId))}/comments/${encodeURIComponent(String(commentId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes output data by content ID from a specified task instance.
     *
     * @param containerId container id that task instance belongs to
     * @param taskInstanceId identifier of the task instance that content belongs to
     * @param contentId identifier of the content to be deleted
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteContent(containerId: string, taskInstanceId: number, contentId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteContent(containerId: string, taskInstanceId: number, contentId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteContent(containerId: string, taskInstanceId: number, contentId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteContent(containerId: string, taskInstanceId: number, contentId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling deleteContent.');
        }

        if (taskInstanceId === null || taskInstanceId === undefined) {
            throw new Error('Required parameter taskInstanceId was null or undefined when calling deleteContent.');
        }

        if (contentId === null || contentId === undefined) {
            throw new Error('Required parameter contentId was null or undefined when calling deleteContent.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/server/containers/${encodeURIComponent(String(containerId))}/tasks/${encodeURIComponent(String(taskInstanceId))}/contents/${encodeURIComponent(String(contentId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Exits a specified task instance.
     *
     * @param containerId container id that task instance belongs to
     * @param taskInstanceId identifier of the task instance that should be exited
     * @param user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public exit(containerId: string, taskInstanceId: number, user?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public exit(containerId: string, taskInstanceId: number, user?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public exit(containerId: string, taskInstanceId: number, user?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public exit(containerId: string, taskInstanceId: number, user?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling exit.');
        }

        if (taskInstanceId === null || taskInstanceId === undefined) {
            throw new Error('Required parameter taskInstanceId was null or undefined when calling exit.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (user !== undefined && user !== null) {
            queryParameters = queryParameters.set('user', <any>user);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.put<any>(`${this.basePath}/server/containers/${encodeURIComponent(String(containerId))}/tasks/${encodeURIComponent(String(taskInstanceId))}/states/exited`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Fails a specified task instance.
     *
     * @param containerId container id that task instance belongs to
     * @param taskInstanceId identifier of the task instance that should be failed
     * @param user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
     * @param body optional map of output variables
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public fail(containerId: string, taskInstanceId: number, user?: string, body?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public fail(containerId: string, taskInstanceId: number, user?: string, body?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public fail(containerId: string, taskInstanceId: number, user?: string, body?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public fail(containerId: string, taskInstanceId: number, user?: string, body?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling fail.');
        }

        if (taskInstanceId === null || taskInstanceId === undefined) {
            throw new Error('Required parameter taskInstanceId was null or undefined when calling fail.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (user !== undefined && user !== null) {
            queryParameters = queryParameters.set('user', <any>user);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/server/containers/${encodeURIComponent(String(containerId))}/tasks/${encodeURIComponent(String(taskInstanceId))}/states/failed`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Forwards a specified task instance to a specified target user for review or for suggested delegation.
     *
     * @param containerId container id that task instance belongs to
     * @param taskInstanceId identifier of the task instance that should be forwarded
     * @param targetUser user that the task should be forwarded to
     * @param user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public forward(containerId: string, taskInstanceId: number, targetUser: string, user?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public forward(containerId: string, taskInstanceId: number, targetUser: string, user?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public forward(containerId: string, taskInstanceId: number, targetUser: string, user?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public forward(containerId: string, taskInstanceId: number, targetUser: string, user?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling forward.');
        }

        if (taskInstanceId === null || taskInstanceId === undefined) {
            throw new Error('Required parameter taskInstanceId was null or undefined when calling forward.');
        }

        if (targetUser === null || targetUser === undefined) {
            throw new Error('Required parameter targetUser was null or undefined when calling forward.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (user !== undefined && user !== null) {
            queryParameters = queryParameters.set('user', <any>user);
        }
        if (targetUser !== undefined && targetUser !== null) {
            queryParameters = queryParameters.set('targetUser', <any>targetUser);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.put<any>(`${this.basePath}/server/containers/${encodeURIComponent(String(containerId))}/tasks/${encodeURIComponent(String(taskInstanceId))}/states/forwarded`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns information about a specified attachment for a specified task instance.
     *
     * @param containerId container id that task instance belongs to
     * @param taskInstanceId identifier of the task instance that attachment belongs to
     * @param attachmentId identifier of the attachment to be loaded
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAttachmentById(containerId: string, taskInstanceId: number, attachmentId: number, observe?: 'body', reportProgress?: boolean): Observable<TaskAttachment>;
    public getAttachmentById(containerId: string, taskInstanceId: number, attachmentId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TaskAttachment>>;
    public getAttachmentById(containerId: string, taskInstanceId: number, attachmentId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TaskAttachment>>;
    public getAttachmentById(containerId: string, taskInstanceId: number, attachmentId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling getAttachmentById.');
        }

        if (taskInstanceId === null || taskInstanceId === undefined) {
            throw new Error('Required parameter taskInstanceId was null or undefined when calling getAttachmentById.');
        }

        if (attachmentId === null || attachmentId === undefined) {
            throw new Error('Required parameter attachmentId was null or undefined when calling getAttachmentById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<TaskAttachment>(`${this.basePath}/server/containers/${encodeURIComponent(String(containerId))}/tasks/${encodeURIComponent(String(taskInstanceId))}/attachments/${encodeURIComponent(String(attachmentId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns the content of a specified attachment for a specified task instance.
     *
     * @param containerId container id that task instance belongs to
     * @param taskInstanceId identifier of the task instance that attachment belongs to
     * @param attachmentId identifier of the attachment that content should be loaded from
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAttachmentContentById(containerId: string, taskInstanceId: number, attachmentId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getAttachmentContentById(containerId: string, taskInstanceId: number, attachmentId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getAttachmentContentById(containerId: string, taskInstanceId: number, attachmentId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getAttachmentContentById(containerId: string, taskInstanceId: number, attachmentId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling getAttachmentContentById.');
        }

        if (taskInstanceId === null || taskInstanceId === undefined) {
            throw new Error('Required parameter taskInstanceId was null or undefined when calling getAttachmentContentById.');
        }

        if (attachmentId === null || attachmentId === undefined) {
            throw new Error('Required parameter attachmentId was null or undefined when calling getAttachmentContentById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/server/containers/${encodeURIComponent(String(containerId))}/tasks/${encodeURIComponent(String(taskInstanceId))}/attachments/${encodeURIComponent(String(attachmentId))}/content`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns all attachments for a specified task instance.
     *
     * @param containerId container id that task instance belongs to
     * @param taskInstanceId identifier of the task instance that attachments should be loaded for
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAttachmentsByTaskId(containerId: string, taskInstanceId: number, observe?: 'body', reportProgress?: boolean): Observable<TaskAttachmentList>;
    public getAttachmentsByTaskId(containerId: string, taskInstanceId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TaskAttachmentList>>;
    public getAttachmentsByTaskId(containerId: string, taskInstanceId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TaskAttachmentList>>;
    public getAttachmentsByTaskId(containerId: string, taskInstanceId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling getAttachmentsByTaskId.');
        }

        if (taskInstanceId === null || taskInstanceId === undefined) {
            throw new Error('Required parameter taskInstanceId was null or undefined when calling getAttachmentsByTaskId.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<TaskAttachmentList>(`${this.basePath}/server/containers/${encodeURIComponent(String(containerId))}/tasks/${encodeURIComponent(String(taskInstanceId))}/attachments`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns a specified comment from a specified task instance.
     *
     * @param containerId container id that task instance belongs to
     * @param taskInstanceId identifier of the task instance that comment belongs to
     * @param commentId identifier of the comment to be loaded
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCommentById(containerId: string, taskInstanceId: number, commentId: number, observe?: 'body', reportProgress?: boolean): Observable<TaskComment>;
    public getCommentById(containerId: string, taskInstanceId: number, commentId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TaskComment>>;
    public getCommentById(containerId: string, taskInstanceId: number, commentId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TaskComment>>;
    public getCommentById(containerId: string, taskInstanceId: number, commentId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling getCommentById.');
        }

        if (taskInstanceId === null || taskInstanceId === undefined) {
            throw new Error('Required parameter taskInstanceId was null or undefined when calling getCommentById.');
        }

        if (commentId === null || commentId === undefined) {
            throw new Error('Required parameter commentId was null or undefined when calling getCommentById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<TaskComment>(`${this.basePath}/server/containers/${encodeURIComponent(String(containerId))}/tasks/${encodeURIComponent(String(taskInstanceId))}/comments/${encodeURIComponent(String(commentId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns all comments in a specified task instance.
     *
     * @param containerId container id that task instance belongs to
     * @param taskInstanceId identifier of the task instance that comments should be loaded for
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCommentsByTaskId(containerId: string, taskInstanceId: number, observe?: 'body', reportProgress?: boolean): Observable<TaskCommentList>;
    public getCommentsByTaskId(containerId: string, taskInstanceId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TaskCommentList>>;
    public getCommentsByTaskId(containerId: string, taskInstanceId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TaskCommentList>>;
    public getCommentsByTaskId(containerId: string, taskInstanceId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling getCommentsByTaskId.');
        }

        if (taskInstanceId === null || taskInstanceId === undefined) {
            throw new Error('Required parameter taskInstanceId was null or undefined when calling getCommentsByTaskId.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<TaskCommentList>(`${this.basePath}/server/containers/${encodeURIComponent(String(containerId))}/tasks/${encodeURIComponent(String(taskInstanceId))}/comments`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns information about a specified task instance.
     *
     * @param containerId container id that task instance belongs to
     * @param taskInstanceId identifier of the task instance that should be loaded
     * @param withInputData optionally loads task input data
     * @param withOutputData optionally loads task output data
     * @param withAssignments optionally loads task people assignments
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTask(containerId: string, taskInstanceId: number, withInputData?: boolean, withOutputData?: boolean, withAssignments?: boolean, observe?: 'body', reportProgress?: boolean): Observable<TaskInstance>;
    public getTask(containerId: string, taskInstanceId: number, withInputData?: boolean, withOutputData?: boolean, withAssignments?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TaskInstance>>;
    public getTask(containerId: string, taskInstanceId: number, withInputData?: boolean, withOutputData?: boolean, withAssignments?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TaskInstance>>;
    public getTask(containerId: string, taskInstanceId: number, withInputData?: boolean, withOutputData?: boolean, withAssignments?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling getTask.');
        }

        if (taskInstanceId === null || taskInstanceId === undefined) {
            throw new Error('Required parameter taskInstanceId was null or undefined when calling getTask.');
        }




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (withInputData !== undefined && withInputData !== null) {
            queryParameters = queryParameters.set('withInputData', <any>withInputData);
        }
        if (withOutputData !== undefined && withOutputData !== null) {
            queryParameters = queryParameters.set('withOutputData', <any>withOutputData);
        }
        if (withAssignments !== undefined && withAssignments !== null) {
            queryParameters = queryParameters.set('withAssignments', <any>withAssignments);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<TaskInstance>(`${this.basePath}/server/containers/${encodeURIComponent(String(containerId))}/tasks/${encodeURIComponent(String(taskInstanceId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns all events for a specified task instance.
     *
     * @param containerId container id that task instance belongs to
     * @param taskInstanceId identifier of the task instance that events should be loaded for
     * @param page optional pagination - at which page to start, defaults to 0 (meaning first)
     * @param pageSize optional pagination - size of the result, defaults to 10
     * @param sort optional sort column, no default
     * @param sortOrder optional sort direction (asc, desc) - defaults to asc
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTaskEvents1(containerId: string, taskInstanceId: number, page?: number, pageSize?: number, sort?: string, sortOrder?: boolean, observe?: 'body', reportProgress?: boolean): Observable<TaskEventInstanceList>;
    public getTaskEvents1(containerId: string, taskInstanceId: number, page?: number, pageSize?: number, sort?: string, sortOrder?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TaskEventInstanceList>>;
    public getTaskEvents1(containerId: string, taskInstanceId: number, page?: number, pageSize?: number, sort?: string, sortOrder?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TaskEventInstanceList>>;
    public getTaskEvents1(containerId: string, taskInstanceId: number, page?: number, pageSize?: number, sort?: string, sortOrder?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling getTaskEvents1.');
        }

        if (taskInstanceId === null || taskInstanceId === undefined) {
            throw new Error('Required parameter taskInstanceId was null or undefined when calling getTaskEvents1.');
        }





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (sortOrder !== undefined && sortOrder !== null) {
            queryParameters = queryParameters.set('sortOrder', <any>sortOrder);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<TaskEventInstanceList>(`${this.basePath}/server/containers/${encodeURIComponent(String(containerId))}/tasks/${encodeURIComponent(String(taskInstanceId))}/events`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns input data for a specified task instance.
     *
     * @param containerId container id that task instance belongs to
     * @param taskInstanceId identifier of the task instance that input data should be loaded from
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTaskInputContentByTaskId(containerId: string, taskInstanceId: number, observe?: 'body', reportProgress?: boolean): Observable<{ [key: string]: any; }>;
    public getTaskInputContentByTaskId(containerId: string, taskInstanceId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<{ [key: string]: any; }>>;
    public getTaskInputContentByTaskId(containerId: string, taskInstanceId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<{ [key: string]: any; }>>;
    public getTaskInputContentByTaskId(containerId: string, taskInstanceId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling getTaskInputContentByTaskId.');
        }

        if (taskInstanceId === null || taskInstanceId === undefined) {
            throw new Error('Required parameter taskInstanceId was null or undefined when calling getTaskInputContentByTaskId.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<{ [key: string]: any; }>(`${this.basePath}/server/containers/${encodeURIComponent(String(containerId))}/tasks/${encodeURIComponent(String(taskInstanceId))}/contents/input`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns output data for a specified task instance.
     *
     * @param containerId container id that task instance belongs to
     * @param taskInstanceId identifier of the task instance that output data should be loaded from
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTaskOutputContentByTaskId(containerId: string, taskInstanceId: number, observe?: 'body', reportProgress?: boolean): Observable<{ [key: string]: any; }>;
    public getTaskOutputContentByTaskId(containerId: string, taskInstanceId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<{ [key: string]: any; }>>;
    public getTaskOutputContentByTaskId(containerId: string, taskInstanceId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<{ [key: string]: any; }>>;
    public getTaskOutputContentByTaskId(containerId: string, taskInstanceId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling getTaskOutputContentByTaskId.');
        }

        if (taskInstanceId === null || taskInstanceId === undefined) {
            throw new Error('Required parameter taskInstanceId was null or undefined when calling getTaskOutputContentByTaskId.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<{ [key: string]: any; }>(`${this.basePath}/server/containers/${encodeURIComponent(String(containerId))}/tasks/${encodeURIComponent(String(taskInstanceId))}/contents/output`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Nominates one or more potential owners to whom the task instance should be assigned.
     *
     * @param containerId container id that task instance belongs to
     * @param taskInstanceId identifier of the task instance that should be nominated
     * @param potOwner list of users that the task should be nominated to
     * @param user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public nominate(containerId: string, taskInstanceId: number, potOwner: Array<string>, user?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public nominate(containerId: string, taskInstanceId: number, potOwner: Array<string>, user?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public nominate(containerId: string, taskInstanceId: number, potOwner: Array<string>, user?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public nominate(containerId: string, taskInstanceId: number, potOwner: Array<string>, user?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling nominate.');
        }

        if (taskInstanceId === null || taskInstanceId === undefined) {
            throw new Error('Required parameter taskInstanceId was null or undefined when calling nominate.');
        }

        if (potOwner === null || potOwner === undefined) {
            throw new Error('Required parameter potOwner was null or undefined when calling nominate.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (user !== undefined && user !== null) {
            queryParameters = queryParameters.set('user', <any>user);
        }
        if (potOwner) {
            potOwner.forEach((element) => {
                queryParameters = queryParameters.append('potOwner', <any>element);
            })
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.put<any>(`${this.basePath}/server/containers/${encodeURIComponent(String(containerId))}/tasks/${encodeURIComponent(String(taskInstanceId))}/states/nominated`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Releases a specified task instance from being claimed by the task owner.
     *
     * @param containerId container id that task instance belongs to
     * @param taskInstanceId identifier of the task instance that should be released
     * @param user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public release(containerId: string, taskInstanceId: number, user?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public release(containerId: string, taskInstanceId: number, user?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public release(containerId: string, taskInstanceId: number, user?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public release(containerId: string, taskInstanceId: number, user?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling release.');
        }

        if (taskInstanceId === null || taskInstanceId === undefined) {
            throw new Error('Required parameter taskInstanceId was null or undefined when calling release.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (user !== undefined && user !== null) {
            queryParameters = queryParameters.set('user', <any>user);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.put<any>(`${this.basePath}/server/containers/${encodeURIComponent(String(containerId))}/tasks/${encodeURIComponent(String(taskInstanceId))}/states/released`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Resumes a specified task instance.
     *
     * @param containerId container id that task instance belongs to
     * @param taskInstanceId identifier of the task instance that should be resumed
     * @param user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public resume(containerId: string, taskInstanceId: number, user?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public resume(containerId: string, taskInstanceId: number, user?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public resume(containerId: string, taskInstanceId: number, user?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public resume(containerId: string, taskInstanceId: number, user?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling resume.');
        }

        if (taskInstanceId === null || taskInstanceId === undefined) {
            throw new Error('Required parameter taskInstanceId was null or undefined when calling resume.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (user !== undefined && user !== null) {
            queryParameters = queryParameters.set('user', <any>user);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.put<any>(`${this.basePath}/server/containers/${encodeURIComponent(String(containerId))}/tasks/${encodeURIComponent(String(taskInstanceId))}/states/resumed`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Adds output data to a specified task instance and returns the ID of the new output content.
     *
     * @param containerId container id that task instance belongs to
     * @param taskInstanceId identifier of the task instance that data should be saved into
     * @param body output data to be saved as Map
     * @param user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public saveContent(containerId: string, taskInstanceId: number, body: string, user?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public saveContent(containerId: string, taskInstanceId: number, body: string, user?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public saveContent(containerId: string, taskInstanceId: number, body: string, user?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public saveContent(containerId: string, taskInstanceId: number, body: string, user?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling saveContent.');
        }

        if (taskInstanceId === null || taskInstanceId === undefined) {
            throw new Error('Required parameter taskInstanceId was null or undefined when calling saveContent.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling saveContent.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (user !== undefined && user !== null) {
            queryParameters = queryParameters.set('user', <any>user);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/server/containers/${encodeURIComponent(String(containerId))}/tasks/${encodeURIComponent(String(taskInstanceId))}/contents/output`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates the description of a specified task instance.
     *
     * @param containerId container id that task instance belongs to
     * @param taskInstanceId identifier of the task instance where description should be updated
     * @param body description as String
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setDescription(containerId: string, taskInstanceId: number, body: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public setDescription(containerId: string, taskInstanceId: number, body: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public setDescription(containerId: string, taskInstanceId: number, body: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public setDescription(containerId: string, taskInstanceId: number, body: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling setDescription.');
        }

        if (taskInstanceId === null || taskInstanceId === undefined) {
            throw new Error('Required parameter taskInstanceId was null or undefined when calling setDescription.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling setDescription.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/server/containers/${encodeURIComponent(String(containerId))}/tasks/${encodeURIComponent(String(taskInstanceId))}/description`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates the expiration date for a specified task instance.
     *
     * @param containerId container id that task instance belongs to
     * @param taskInstanceId identifier of the task instance where expiration date should be updated
     * @param body expiration date as Date
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setExpirationDate(containerId: string, taskInstanceId: number, body: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public setExpirationDate(containerId: string, taskInstanceId: number, body: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public setExpirationDate(containerId: string, taskInstanceId: number, body: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public setExpirationDate(containerId: string, taskInstanceId: number, body: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling setExpirationDate.');
        }

        if (taskInstanceId === null || taskInstanceId === undefined) {
            throw new Error('Required parameter taskInstanceId was null or undefined when calling setExpirationDate.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling setExpirationDate.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/server/containers/${encodeURIComponent(String(containerId))}/tasks/${encodeURIComponent(String(taskInstanceId))}/expiration`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates the name of a specified task instance.
     *
     * @param containerId container id that task instance belongs to
     * @param taskInstanceId identifier of the task instance where name should be updated
     * @param body name as String
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setName(containerId: string, taskInstanceId: number, body: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public setName(containerId: string, taskInstanceId: number, body: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public setName(containerId: string, taskInstanceId: number, body: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public setName(containerId: string, taskInstanceId: number, body: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling setName.');
        }

        if (taskInstanceId === null || taskInstanceId === undefined) {
            throw new Error('Required parameter taskInstanceId was null or undefined when calling setName.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling setName.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/server/containers/${encodeURIComponent(String(containerId))}/tasks/${encodeURIComponent(String(taskInstanceId))}/name`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates the priority of a specified task instance.
     *
     * @param containerId container id that task instance belongs to
     * @param taskInstanceId identifier of the task instance where priority should be updated
     * @param body priority as Integer
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setPriority(containerId: string, taskInstanceId: number, body: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public setPriority(containerId: string, taskInstanceId: number, body: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public setPriority(containerId: string, taskInstanceId: number, body: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public setPriority(containerId: string, taskInstanceId: number, body: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling setPriority.');
        }

        if (taskInstanceId === null || taskInstanceId === undefined) {
            throw new Error('Required parameter taskInstanceId was null or undefined when calling setPriority.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling setPriority.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/server/containers/${encodeURIComponent(String(containerId))}/tasks/${encodeURIComponent(String(taskInstanceId))}/priority`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Marks a specified task instance that can be skipped in a sequence of tasks.
     *
     * @param containerId container id that task instance belongs to
     * @param taskInstanceId identifier of the task instance where skipable flag should be updated
     * @param body skipable flag as Boolean
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setSkipable(containerId: string, taskInstanceId: number, body: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public setSkipable(containerId: string, taskInstanceId: number, body: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public setSkipable(containerId: string, taskInstanceId: number, body: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public setSkipable(containerId: string, taskInstanceId: number, body: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling setSkipable.');
        }

        if (taskInstanceId === null || taskInstanceId === undefined) {
            throw new Error('Required parameter taskInstanceId was null or undefined when calling setSkipable.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling setSkipable.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/server/containers/${encodeURIComponent(String(containerId))}/tasks/${encodeURIComponent(String(taskInstanceId))}/skipable`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Skips a specified task instance within the sequence of tasks in the process instance
     *
     * @param containerId container id that task instance belongs to
     * @param taskInstanceId identifier of the task instance that should be skipped
     * @param user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public skip(containerId: string, taskInstanceId: number, user?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public skip(containerId: string, taskInstanceId: number, user?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public skip(containerId: string, taskInstanceId: number, user?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public skip(containerId: string, taskInstanceId: number, user?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling skip.');
        }

        if (taskInstanceId === null || taskInstanceId === undefined) {
            throw new Error('Required parameter taskInstanceId was null or undefined when calling skip.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (user !== undefined && user !== null) {
            queryParameters = queryParameters.set('user', <any>user);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.put<any>(`${this.basePath}/server/containers/${encodeURIComponent(String(containerId))}/tasks/${encodeURIComponent(String(taskInstanceId))}/states/skipped`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Starts a specified task instance.
     *
     * @param containerId container id that task instance belongs to
     * @param taskInstanceId identifier of the task instance that should be started
     * @param user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public start(containerId: string, taskInstanceId: number, user?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public start(containerId: string, taskInstanceId: number, user?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public start(containerId: string, taskInstanceId: number, user?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public start(containerId: string, taskInstanceId: number, user?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling start.');
        }

        if (taskInstanceId === null || taskInstanceId === undefined) {
            throw new Error('Required parameter taskInstanceId was null or undefined when calling start.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (user !== undefined && user !== null) {
            queryParameters = queryParameters.set('user', <any>user);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.put<any>(`${this.basePath}/server/containers/${encodeURIComponent(String(containerId))}/tasks/${encodeURIComponent(String(taskInstanceId))}/states/started`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Stops a specified task instance.
     *
     * @param containerId container id that task instance belongs to
     * @param taskInstanceId identifier of the task instance that should be stopped
     * @param user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public stop(containerId: string, taskInstanceId: number, user?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public stop(containerId: string, taskInstanceId: number, user?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public stop(containerId: string, taskInstanceId: number, user?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public stop(containerId: string, taskInstanceId: number, user?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling stop.');
        }

        if (taskInstanceId === null || taskInstanceId === undefined) {
            throw new Error('Required parameter taskInstanceId was null or undefined when calling stop.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (user !== undefined && user !== null) {
            queryParameters = queryParameters.set('user', <any>user);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.put<any>(`${this.basePath}/server/containers/${encodeURIComponent(String(containerId))}/tasks/${encodeURIComponent(String(taskInstanceId))}/states/stopped`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Suspends a specified task instance.
     *
     * @param containerId container id that task instance belongs to
     * @param taskInstanceId identifier of the task instance that should be suspended
     * @param user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
     * @param body optional map to pass parameters to suspend. e.g suspendUntil
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public suspend(containerId: string, taskInstanceId: number, user?: string, body?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public suspend(containerId: string, taskInstanceId: number, user?: string, body?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public suspend(containerId: string, taskInstanceId: number, user?: string, body?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public suspend(containerId: string, taskInstanceId: number, user?: string, body?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling suspend.');
        }

        if (taskInstanceId === null || taskInstanceId === undefined) {
            throw new Error('Required parameter taskInstanceId was null or undefined when calling suspend.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (user !== undefined && user !== null) {
            queryParameters = queryParameters.set('user', <any>user);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/server/containers/${encodeURIComponent(String(containerId))}/tasks/${encodeURIComponent(String(taskInstanceId))}/states/suspended`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates information in a specified task instance.
     *
     * @param containerId container id that task instance belongs to
     * @param taskInstanceId identifier of the task instance that should be updated
     * @param body task instance with updates as TaskInstance type
     * @param user optional user id to be used instead of authenticated user - only when bypass authenticated user is enabled
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public update(containerId: string, taskInstanceId: number, body: string, user?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public update(containerId: string, taskInstanceId: number, body: string, user?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public update(containerId: string, taskInstanceId: number, body: string, user?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public update(containerId: string, taskInstanceId: number, body: string, user?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (containerId === null || containerId === undefined) {
            throw new Error('Required parameter containerId was null or undefined when calling update.');
        }

        if (taskInstanceId === null || taskInstanceId === undefined) {
            throw new Error('Required parameter taskInstanceId was null or undefined when calling update.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling update.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (user !== undefined && user !== null) {
            queryParameters = queryParameters.set('user', <any>user);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/server/containers/${encodeURIComponent(String(containerId))}/tasks/${encodeURIComponent(String(taskInstanceId))}`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
